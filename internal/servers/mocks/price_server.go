// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/roman-wb/price-service/internal/servers (interfaces: Parser,PriceRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	models "github.com/roman-wb/price-service/internal/models"
)

// MockParser is a mock of Parser interface.
type MockParser struct {
	ctrl     *gomock.Controller
	recorder *MockParserMockRecorder
}

// MockParserMockRecorder is the mock recorder for MockParser.
type MockParserMockRecorder struct {
	mock *MockParser
}

// NewMockParser creates a new mock instance.
func NewMockParser(ctrl *gomock.Controller) *MockParser {
	mock := &MockParser{ctrl: ctrl}
	mock.recorder = &MockParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParser) EXPECT() *MockParserMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockParser) Do(arg0 string) ([]models.Price, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0)
	ret0, _ := ret[0].([]models.Price)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockParserMockRecorder) Do(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockParser)(nil).Do), arg0)
}

// MockPriceRepo is a mock of PriceRepo interface.
type MockPriceRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPriceRepoMockRecorder
}

// MockPriceRepoMockRecorder is the mock recorder for MockPriceRepo.
type MockPriceRepoMockRecorder struct {
	mock *MockPriceRepo
}

// NewMockPriceRepo creates a new mock instance.
func NewMockPriceRepo(ctrl *gomock.Controller) *MockPriceRepo {
	mock := &MockPriceRepo{ctrl: ctrl}
	mock.recorder = &MockPriceRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPriceRepo) EXPECT() *MockPriceRepoMockRecorder {
	return m.recorder
}

// Import mocks base method.
func (m *MockPriceRepo) Import(arg0 time.Time, arg1 []models.Price) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Import", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Import indicates an expected call of Import.
func (mr *MockPriceRepoMockRecorder) Import(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Import", reflect.TypeOf((*MockPriceRepo)(nil).Import), arg0, arg1)
}
